package com.capgemini.hibernateonetooneexample.dao;



import org.hibernate.Session;
import org.hibernate.Transaction;

import com.capgemini.hibernateonetooneexample.entity.Instructor;
import com.capgemini.hibernateonetooneexample.util.HibernateUtil;

public class InstructorDao {
	
	//inserting the instructor
	public void SaveInstructor(Instructor instructor) {
		Transaction transaction = null;
		try {
			Session session = HibernateUtil.getSessionFactory().openSession();
			//start transaction
			transaction =  session.beginTransaction();
			//save the instructor object
			session.save(instructor);
			//commit the transaction
			transaction.commit();
		}catch (Exception e) {
			if(transaction != null) {
				transaction.rollback();
			}
			e.printStackTrace();
		}
	}
	
	
	
	public void updateInstructor(Instructor instructor) {
		Transaction transaction = null;
		try {
			Session session = HibernateUtil.getSessionFactory().openSession();
			//start transaction
			transaction =  session.beginTransaction();
			//save the instructor object
			session.update(instructor);
			//commit the transaction
			transaction.commit();
		}catch (Exception e) {
			if(transaction != null) {
				transaction.rollback();
			}
			e.printStackTrace();
		}
		
	}
	public void deleteInstructor(int id) {
		Transaction transaction = null;
		try {
			Session session = HibernateUtil.getSessionFactory().openSession();
			//start transaction
			transaction =  session.beginTransaction();
			//get instructor using id
			Instructor instructor = session.get(Instructor.class, id);
			//delete the instructor object
			session.delete(instructor);
			//commit the transaction
			transaction.commit();
		}catch (Exception e) {
			if(transaction != null) {
				transaction.rollback();
			}
			e.printStackTrace();
		}
		
	}
	public Instructor getInstructor(int id) {
		Transaction transaction = null;
		try {
			Session session = HibernateUtil.getSessionFactory().openSession();
			//start transaction
			transaction =  session.beginTransaction();
			//get instructor using id
			Instructor instructor = session.get(Instructor.class, id);

			//commit the transaction
			transaction.commit();
		}catch (Exception e) {
			if(transaction != null) {
				transaction.rollback();
			}
			e.printStackTrace();
		}
		
	}
	public void getAllInstructors() {
		
	}

}
